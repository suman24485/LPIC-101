############################
Linux boot process sequence
############################
System Starts --> BIOS --> Boot Sector --> Linux Kernel -->
-> Lnx will load an initial RAM disk which contains a set of device drivers
to eventually mount the filesystem from the harddisk
-> then the kernel starts off the initialization system
-> Once the initilization system starts kernel continues to load the services and initial RAM disk will be rmoved

GRUB
Boot Logs
Logs generated during computer boot up
these logs are volatile
these logs are generated from an area kernel ring buffer - area of RAM that kernel writes all of the system msgs to

dmesg
traditional utility used for viewing the kernel ring buffer
#dmesg - typical output is low-level messages

journctl
systemd utility to view the kernel ring buffer within the systemd journal
#journalctl -k

############################
init
############################
- BAsed off the System V init used in UNIX
- on System V init Services are started one after the other in a serial fashion

init startup
Initialization system --> /sbin/init --> /etc/inittab (configurations)
inittab will determine the runlevels
Runlevels:
0 - halt
1 - single user(only root can login)
2 - Multi User without networking
3 - Multi User with networking
4 - Unused
5 - Multi-user,networking and graphical desktop
6 - reboot

cat /etc/inittab
<identifier>:<runlevel>:<action>:<process>
id:3:initdefault:
si::sysinit:/etc/rc.d/rc.sysinit
si - sysinit
Each line specifies a runlevel
l0:0:wait/etc/rc.d/rc 0
l1:0:wait/etc/rc.d/rc 0
l2:0:wait/etc/rc.d/rc 0
l3:0:wait/etc/rc.d/rc 0
l4:0:wait/etc/rc.d/rc 0
l5:0:wait/etc/rc.d/rc 0

Sample Init boot sequence
1.Boot disk is found by boot loader
2.Kernel and initial RAM disk are loaded
3.Kernel pulls initial drivers and setup tools from RAM disk
4.Kernel hands the system over to /sbin/init
5.init performs system maintenance tasks from /etc/rc.d/rc.sysinit
6.init has read the initdefault line in /etc/inittab and enters runlevel 3
7.Now the system is READY FOR USE

#ls /etc/init.d ( on debian)
#ls /etc/rc.d (on redhat)
rc - run commands
init.d rc rc0.d to rc6.d(pertains to specific run levels)
rc.local - customized by admin to start additional services
rc.sysinit

#ls rc3.d
K[0-9][0-9]* - services that are to be killed
S[0-9][0-9]* - services that are to be started

/etc/init.d contains the scripts for the services on the system
/etc/init.d/rc script that orchestrates how the runlevel scripts run and what occurs when a runlevel changes

############################
upstart
############################
- Developed for Ubuntu in 2006
- Eventually used in redhat6,debian and fedora9
- unline init,upstart offers asynchronous starting of services - decreasing boot up times
- works off of real-time events, which init was not designed to understand
    - upstart not only stop and start services but monitors their availability as well

init vs upstart

init
/sbin/init --> /etc/inittab/ --> /etc/rc.d/rc.sysinit --> /etc/rc.d/rcX.d (in sequential order) --> login

/sbin/init --> startup(7) --> mountall(8)
                          --> /etc/init/rc-sysinit.conf --> telinit(8) --> runlevel(7) --> /etc/init/rc.conf --> login

fireup startup
mountall to load fs and device drivers
/etc/init/rc-sysinit.conf - calls telinit to switch to default runlevel
runlevel - its not traditional systemv runlevel

upstart service monitoring
- init is static,it doesnot natively respond tp changes on a system
- upstart is dynamic it can respond to changes on the system
- A change on a lnx system is an "event"
- Event trigger jobs
- jobs have two categories
    - tasks - stops once the request is done and remains in the wait state
    - services -

Waiting --> starting --> running --> stopping --> killed --> post-stop --> waiting
                                 --> respawning

############################
systemd
############################
Getting rid of shell scripts
- init and parts of upstart rely on bash shell scripts
- systemd replaces the functionality of the shell scripts with compiled C code
- still compatible with older system V init scripts
UnitFile Locations - unitfiles shouldn't be edited
/usr/lib/systemd/system - provided by pkg installations
/etc/systemd/system - unit file location for system admins( these take precedence over other in /usr)
/run/systemd/system -  runtime unit files
systemctl list-unit-files (lists all unitfiles)

components of unit file
Unit file follows the ini sytle format first seen in MS-DOS
[Unit]
Description=Multi-User System
Documentation=man:systemd.special(7)
Requires=basic.target
    orWants=(more robust)
Conflicts=rescue.service rescue.target
After=basic.target rescue.service rescue.target
man 5 systemd.unit

systemctl cat something.unit ->prints out contents of the unit file specified

Kernel still looks for /sbin/init
systemd just took the place of /sbin/init which is the symbolic of ../lib/systemd/sysstemd
